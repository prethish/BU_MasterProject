
//----------------------------------------------------------------------------------------------------------------------
/// @file GLWindow.h
/// @brief a basic Qt GL window class for ngl
/// @author Prethish Bhasuran
/// Modified from :-
/// @author Jonathan Macey
/// @date 10/10/10
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file
//----------------------------------------------------------------------------------------------------------------------
#ifndef GL_WINDOW_H__
#define GL_WINDOW_H__

#include <ngl/Camera.h>
#include <ngl/TransformStack.h>
#include <ngl/Vec3.h>
#include<ngl/Text.h>

#include <QEvent>
#include <QResizeEvent>
#include <QGLWidget>
#include <QTime>

#include"SceneLoader.h"
#include"SkinDeformer.h"


class GLWindow : public QGLWidget
{
  Q_OBJECT        // must include this if you use Qt signals/slots
public :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for GLWindow
  /// @param [in] _format display format of an OpenGL rendering context
  ///@param [in] _parent the parent window to create the GL context in
  //----------------------------------------------------------------------------------------------------------------------
  GLWindow(const QGLFormat _format, QWidget *_parent);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
  ~GLWindow();
public slots :
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to toggle wireframe mode
  /// @param[in] _mode the mode passed from the toggle
  /// button
    //----------------------------------------------------------------------------------------------------------------------
  void toggleWireframe(bool _mode);
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief a slot to set the colour
  //----------------------------------------------------------------------------------------------------------------------
  void setColour();
  //----------------------------------------------------------------------------------------------------------------------
/// @brief a slot to toggle the animation timer to ON and OFF
 /// @param _t on/off bool value
//----------------------------------------------------------------------------------------------------------------------
  void toggleMainTimer(bool _t);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief slot to turn on/off fps information and othe debug info on the UI
  /// @param _v on/off bool value
  // ------------------------------------------
  inline void toggleDebugInfo(bool _v) {
    m_debugDisplay = _v;
  }
  //----------------------------------------------------------------------------------------------------------------------
/// @brief increment the animation by a single frame
//----------------------------------------------------------------------------------------------------------------------
  void incrementFrame();
  //----------------------------------------------------------------------------------------------------------------------
/// @brief decrement the animation by a single frame
//----------------------------------------------------------------------------------------------------------------------
  void decrementFrame();


  //----------------------------------------------------------------------------------------------------------------------
/// @brief set the type skinning algorithm to use
/// _i skinAlgorithm index
//----------------------------------------------------------------------------------------------------------------------
  void setSkinAlgorithm(int _i) { m_deformMesh->setSkinAlgorithm(_i);}
  //----------------------------------------------------------------------------------------------------------------------
/// @brief to load the object
/// @param _p path on Harddisk
/// @param _v object name
//----------------------------------------------------------------------------------------------------------------------
  void loadObj(std::string _p, std::string _o);


private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the x rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinXFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the y rotation mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_spinYFace;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to indicate if the Right mouse button is pressed when dragging
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translate;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value
  //----------------------------------------------------------------------------------------------------------------------
  int m_origY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous x mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origXPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the previous y mouse value for Position changes
  //----------------------------------------------------------------------------------------------------------------------
  int m_origYPos;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief used to store the global mouse transforms
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_mouseGlobalTX;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the model position for mouse movement
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief our camera
    //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera *m_camera;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief transformation stack for the gl transformations etc
  //----------------------------------------------------------------------------------------------------------------------
  ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief m_wireframe mode
    //----------------------------------------------------------------------------------------------------------------------
  bool m_wireframe;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief path to the selected object
    //----------------------------------------------------------------------------------------------------------------------
  std::string m_selectedObject;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief imported scene data
 //----------------------------------------------------------------------------------------------------------------------
 SceneLoader *m_sceneData;
 //----------------------------------------------------------------------------------------------------------------------
 /// @brief deformed Mesh data
//----------------------------------------------------------------------------------------------------------------------
 SkinDeformer *m_deformMesh;
 //----------------------------------------------------------------------------------------------------------------------
 /// @brief transforms to draw the finalBones for debug purposes
//----------------------------------------------------------------------------------------------------------------------
 std::vector<ngl::Mat4> m_boneTransfroms;
 //----------------------------------------------------------------------------------------------------------------------
 /// @brief animation ON/OFF
//----------------------------------------------------------------------------------------------------------------------
 bool m_animate;
 //----------------------------------------------------------------------------------------------------------------------
 /// @brief current frame for incrementing and decrementing
//----------------------------------------------------------------------------------------------------------------------
 ngl::Real m_frameTime;
 //----------------------------------------------------------------------------------------------------------------------
 /// @brief timerID of the QTtimer
//----------------------------------------------------------------------------------------------------------------------
 int m_timerID;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the current frame
  //----------------------------------------------------------------------------------------------------------------------
  uint m_frame;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief ngl::Font for display
 //----------------------------------------------------------------------------------------------------------------------
  ngl::Text *m_text;
  //-------------------------------------
  /// @brief turn on/off fps information and othe debug info on the UI
  // ------------------------------------------
  bool m_debugDisplay;
protected:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
    //----------------------------------------------------------------------------------------------------------------------
  void initializeGL();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
   //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(const int _w, const int _h);
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is the main gl drawing routine which is called whenever the window needs to
  /// be re-drawn
    //----------------------------------------------------------------------------------------------------------------------
  void paintGL();
private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when a key is pressed
  /// @param [in] _event the Qt event to query for size etc
  //----------------------------------------------------------------------------------------------------------------------
  void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent(QMouseEvent * _event);
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent(QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
    //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent(QMouseEvent *_event);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse wheel is moved
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent(QWheelEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
  /// @brief timer event trigered by startTimer
    //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(QTimerEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief function to load the current transforms to the shaders for display
 //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader();

};

#endif
